#!/usr/bin/perl
# --------------------------------------------------------------------------- #
#
# @scriptname mysql_create_snapshot
# @shortdescription Creation d'un snapshot d'un LV hebergeant des donnees mysql
# @longdescription
# @author Denis Sacchet <denis@rack42.fr>
# @version 0.1
# @category system
# @frequency N/A
# @link https://apps.rack42.fr/dokuwiki/doku.php?id=infra:interne:backup:mysql
# @safetorunatanytime no
# @input
# @output
#
# Changelog :
#
#   14 Oct 2010; Denis Sacchet <denis@rack42.fr>
#   Version initiale
#
# --------------------------------------------------------------------------- #

# --------------------------------------------------------------------------- #
# Initialisation

use strict;

use R42;
use R42::Log;
use R42::Mysql;
use Getopt::Std;

R42::Log::set_logsyslog("true");
R42::Log::set_logdebug("true");

# --------------------------------------------------------------------------- #
# Definitions des fonctions

my $vg='data';
my $lv='s001.mysql.zaas.fr-srv-mysql';
my $block='xvdc1';
my $server='s001.mysql.zaas.fr';
my $dbh;

sub usage() {
        print "mysql_create_snapshot -s <mysql server> -v <vg> -l <lv> -b <blockdevice>
 -h : display this message and exit
 -d : enable debug mode
 -q : enable quiet mode
 -s <mysql server/domU> : mysql server for which we want to make a snapshot
 -l <lv> : logical volume containing the mysql data
 -v <vg> : volume group containing the lv
 -b <block> : block device inside domU

 Example : mysql_create_snapshot -s mysql001.hosting.com -v data -l mysql001.hosting.com-data -b xvdc1
"
}

sub cb_trap {
        # Mettre ici ce qui faut pour faire le menage en cas de CTRL+C ...
        exit $R42::exit_alert;
}

sub check_if_vg_exists($) {
	R42::Log::log_message('debug','check_if_vg_exists');
	my ($vg) = @_;
	system("vgs $vg &> /dev/null");
	return $?;
}

sub check_if_lv_exists($$) {
	R42::Log::log_message('debug','check_if_lv_exists');
	my ($vg,$lv) = @_;
	system("lvs /dev/$vg/$lv &> /dev/null");
	return $?;
}

sub check_if_lv_snapshot_exists($$) {
	R42::Log::log_message('debug','check_if_lv_snapshot_exists');
	my ($vg,$lv) = @_;
	system("lvs /dev/$vg/$lv-backup &> /dev/null");
	return $?;
}

sub db_connect($) {
	R42::Log::log_message('debug','db_connect');
	my ($server) = @_;
	my $dbh=R42::Mysql::connect('s001.mysql.zaas.fr');
	return $dbh;
}

sub lock($) {
	R42::Log::log_message('debug','lock');
	my ($dbh) = @_;
	my $result;
	$result=R42::Mysql::do($dbh,'FLUSH TABLES WITH READ LOCK');
	if($result eq -2) {
		return 1;
	}
	$result=R42::Mysql::do($dbh,'FLUSH LOGS');
	if($result eq -2) {
		return 1;
	}
	return 0;
}

sub take_snapshot($$) {
	R42::Log::log_message('debug','take_snapshot');
	my ($vg,$lv) = @_;
	system("/sbin/lvcreate -L 1G -s -n $lv-backup /dev/$vg/$lv &> /dev/null");
	return $?
}

sub unlock($) {
	R42::Log::log_message('debug','unlock');
	my ($dbh) = @_;
	my $result;
	$result=R42::Mysql::do($dbh,'UNLOCK TABLES');
	if($result eq -2) {
		return 1;
	}
	return 0;
}

sub db_disconnect($) {
	R42::Log::log_message('debug','db_disconnect');
	my $result;
	my ($dbh) = @_;
	$result=R42::Mysql::disconnect($dbh);
	return $result;
}

sub check_if_block_exists($$) {
	R42::Log::log_message('debug','check_if_block_exists');
	my ($server,$block)=@_;
	my $BLOCKLIST;
	my $XENSTORE;
	my $found = 1;

	if(!open($BLOCKLIST,'-|',"xm block-list $server")) {
		R42::Log::log_message('error',"Unable to execute commande xm block-list $server (Errno : $!)");
		return -1;
	}
	while(<$BLOCKLIST>) {
		chomp;
		my @fields = split / +/;
		next if($fields[0] eq "Vdev");
		if(!open($XENSTORE,'-|',"xenstore-ls ".$fields[6])) {
			R42::Log::log_message('error',"Unable to execute commande xenstore-ls ".$fields[7]." (Errno : $!)");
			close($BLOCKLIST);
			return -1;
		}
		while(<$XENSTORE>) {
			chomp;
			my($key,$value) = split / = /;
			next if($key ne "dev");
			$found=0 if($value eq "/dev/$block");
		}
		close($XENSTORE);
	}
	close($BLOCKLIST);
	return $found;
}

sub block_attach($$$$) {
	my ($server,$vg,$lv,$block) = @_;
	system("xm block-attach $server phy:/dev/$vg/$lv-backup /dev/$block w &> /dev/null");
	return $?;
}

if(check_if_vg_exists($vg) ne 0) {
	R42::Log::log_message('error',"Specified VG $vg doesn't exist");
	exit $R42::exit_error;
}
if(check_if_lv_exists($vg,$lv) ne 0) {
	R42::Log::log_message('error',"Specified LV $lv doesn't exist in specified VG $vg");
	exit $R42::exit_error;
}
if(check_if_lv_snapshot_exists($vg,$lv) eq 0) {
	R42::Log::log_message('error',"An LV $lv-backup already exists in VG $vg");
	exit $R42::exit_error;
}
if(check_if_block_exists($server,$block) eq 0) {
	R42::Log::log_message('error',"Block device /dev/$block already exists on domU $server");
	exit $R42::exit_error;
}
$dbh=db_connect('s001.mysql.zaas.fr');
if(!$dbh) {
	R42::Log::log_message('error',"Unable to connect to database");
	exit $R42::exit_error;
}
if(lock($dbh) ne 0) {
	R42::Log::log_message('error',"Unable to obtain global lock");
	db_disconnect($dbh);
	exit $R42::exit_error;
}
if(take_snapshot($vg,$lv) ne 0) {
	R42::Log::log_message('error',"Unable to create the snapshot");
	exit $R42::exit_error;
}
unlock($dbh);
db_disconnect($dbh);

if(block_attach($server,$vg,$lv,$block) ne 0) {
	R42::Log::log_message('error',"Unable to attach block device into domU");
	exit $R42::exit_error;
}
exit $R42::exit_ok;
